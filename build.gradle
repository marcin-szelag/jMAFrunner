buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2' //adds junitPlatformTest task
	}
}

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'

group = 'pl.poznan.put.cs.idss.jrs.jmaf'
version = '0.1.0'

// In this section you declare where to find the dependencies of your project
repositories {
    //jcenter()
    mavenCentral()
    flatDir {
       dirs 'lib'
	}
}

dependencies {
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.0.2")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.0.2")
	
	testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.0.2")
	
	testImplementation("org.mockito:mockito-core:2.23.4")
	
	// To use Log4J's LogManager
	testRuntimeOnly("org.apache.logging.log4j:log4j-core:2.10.0") //licenced under Apache License 2.0; https://logging.apache.org/log4j/2.x/
	testRuntimeOnly("org.apache.logging.log4j:log4j-jul:2.10.0") //licenced under Apache License 2.0; https://logging.apache.org/log4j/2.x/
	
	//implementation fileTree(dir: 'lib', include: '*.jar')
	implementation name: 'jRS'
}

junitPlatform {
	// platformVersion '1.0.2'
	filters {
		engines {
			// include 'junit-jupiter', 'junit-vintage'
			// exclude 'custom-engine'
		}
		tags {
			// include 'fast'
			//exclude 'integration'
		}
		// includeClassNamePattern '.*Test'
	}
	enableStandardTestTask true
	// reportsDir file('build/test-results/junit-platform') // this is the default
	logManager 'org.apache.logging.log4j.jul.LogManager'
}

jar {
	manifest {
		attributes('Implementation-Title': project.name,
				   'Implementation-Version': project.version)
	}
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
	group 'build' 
	manifest {
        attributes 'Implementation-Title': project.name,  
        	'Implementation-Version': project.version,
        	'Main-Class': 'pl.poznan.put.cs.idss.jrs.jmaf.runner.Runner'
    }
    baseName = project.name + '-standalone'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task all(dependsOn: ["junitPlatformTest", "fatJar"], description: "Performs all tasks") {
	group 'aggregate'
	description 'Run tests, build fat jar'
	
	doLast {
		println("Building jMAFrunner completed.")
	}
}
